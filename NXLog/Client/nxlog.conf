Panic Soft

define INSTALLDIR C:\Program Files\nxlog

define NXLOGVERSION nxlog_version()
define NXLOGEDITION 'nxlog-ee'
define ECSV '1.10.0'

define CERTDIR %INSTALLDIR%\cert
define CONFDIR %INSTALLDIR%\conf\nxlog.d

# Note that these two lines define constants only; the log file location
# is ultimately set by the `LogFile` directive (see below). The
# `MYLOGFILE` define is also used to rotate the log file automatically
# (see the `_fileop` block).
define LOGDIR %INSTALLDIR%\data
define MYLOGFILE %LOGDIR%\nxlog.log

# If you are not using NXLog Manager, disable the `include` line
# and enable LogLevel and LogFile.
#include %CONFDIR%\*.conf
# ADMS is not using NXLog Manager. Line above commeneted out for this reason

LogLevel    INFO
LogFile     %MYLOGFILE%

# Path to windows_env.cmd file for Windows enrichment.
# Modify it if required or comment the line below if not needed.
include_stdout    C:\Program Files\nxlog\conf\windows_env.cmd

# <---------- Extensions ---------->

<Extension json>
    Module        xm_json
    DateFormat    YYYY-MM-DDThh:mm:ss.sUTC
</Extension>

<Extension win_ecs>
    Module        xm_rewrite
    <Exec>
      $timestamp = $EventTime;
      rename_field("timestamp","@timestamp");
      if defined $UtcTime ${event.time.utc} = $UtcTime;

      ${ecs.version} = %ECSV%;
      ${tags} = '["testing","'+$Hostname+'"]';
      ${agent.hostname} = $Hostname;
      ${agent.name} = $Hostname;
      ${agent.type} = %NXLOGEDITION%;
      ${agent.version} = %NXLOGVERSION%;
      ${nxlog.version} = %NXLOGVERSION%;

      ${host.architecture} = '%ARCHITECTURE%';
      ${host.ip} = host_ip();
      ${host.name} = $Hostname;
      ${host.os.build} = '%HOSTVER%';
      ${host.os.family} = '%FAMILY%';
      ${host.os.name} = '%OSNAME%';
      ${host.os.kernel} = '%WINBUILD%';
      ${host.os.platform} = '%PLATFORM%';
      ${host.os.type} = lc('%HOSTTYPE%');

      ${event.action} = $Category;
      ${event.original} = $raw_event;
      ${event.time.original} = $EventTime;
      ${event.time.received} = $EventReceivedTime;
      ${winlog.api} = 'wineventlog';
      ${winlog.computer_name} = $Hostname;

      if defined $Description
      {
        ${process.pe.description} = $Description;
        ${winlog.event_data.Description} = $Description;
      }

      # Regular Expressions to capture data from events
      if $Image =~ /\\(.*)\\(.*)/ ${process.name} = $2;
      if $Data =~ /[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2}T[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}Z/
      {
        rename_field("data","windows.application.timestamp");
      }

      if $User =~ /(.*)\\(.*)/
      {
        ${user.domain} = $1;
        ${user.name} = $2;
        ${related.user} = $2;
      }
      if $Hashes =~ /(SHA256)=(.*)/ ${hash.sha256} = $2;

      # For Windows PowerShell
      if $Channel == "Windows PowerShell"
      {
        if $Data_2 =~ /NewEngineState=(.*)/ ${powershell.engine.new_state} = $1;
        if $Data_2 =~ /PreviousEngineState=(.*)/ ${powershell.engine.previous_state} = $1;
        if $Data_2 =~ /SequenceNumber=(.*)/ ${event.sequence} = $1;
        if $Data_2 =~ /HostName=(.*)/ ${process.title} = $1;
        if $Data_2 =~ /HostVersion=(.*)/ ${powershell.executable.version} = $1;
        if $Data_2 =~ /HostId=(.*)/ ${process.entity_id} = $1;
        if $Data_2 =~ /HostApplication=(.*)/ ${process.args} = $1;
        if $Data_2 =~ /HostApplication=(.*)/ ${process.command_line} = $1;
        if $Data_2 =~ /EngineVersion=(.*)/ ${powershell.engine.version} = $1;
        if $Data_2 =~ /RunspaceId=(.*)/ ${powershell.runspace_id} = $1;
      }
    </Exec>

    # Renamed Fields
    Rename        Version, winlog.version
    Rename        SourceModuleType, nxlog.module.type
    Rename        SourceModuleName, nxlog.module.name
    Rename        Message, message
    Rename        Channel, event.provider
    Rename        OpCode, log.level
    Rename        Image, process.executable
    Rename        ProcessGuid, process.entity_id
    Rename        ProcessId, process.pid
    Rename        SourceName, winlog.provider_name
    Rename        EventType, winlog.opcode
    Rename        Domain, winlog.user.name
    Rename        UserID, winlog.user.identifier
    Rename        ExecutionProcessID, winlog.process.pid
    Rename        ExecutionThreadID, winlog.process.thread
    Rename        ProviderGuid, winlog.provider_guid
    Rename        RecordNumber, winlog.record_id
    Rename        AccountType, winlog.user.type
    Rename        AccountName, winlog.user.name
    Rename        Category, winlog.task
    Rename        VirtualAccount, winlog.event_data.VirtualAccount
    Rename        TransmittedServices, winlog.event_data.TransmittedServices
    Rename        TargetUserSid, winlog.event_data.TargetUserSid
    Rename        TargetUserName, winlog.event_data.TargetUserName
    Rename        TargetOutboundUserName, winlog.event_data.TargetOutboundUserName
    Rename        TargetOutboundDomainName, winlog.event_data.TargetOutboundDomainName
    Rename        TargetLogonId, winlog.event_data.TargetLogonId
    Rename        TargetLinkedLogonId, winlog.event_data.TargetLinkedLogonId
    Rename        TargetDomainName, winlog.event_data.TargetDomainName
    Rename        SubjectUserSid, winlog.event_data.SubjectUserSid
    Rename        SubjectUserName, winlog.event_data.SubjectUserName
    Rename        SubjectLogonId, winlog.event_data.SubjectLogonId
    Rename        SubjectDomainName, winlog.event_data.SubjectDomainName
    Rename        RestrictedAdminMode, winlog.event_data.RestrictedAdminMode
    Rename        ProcessName, process.name
    Rename        LogonType, winlog.event_data.LogonType
    Rename        LogonProcessName, winlog.event_data.LogonProcessName
    Rename        LogonGuid, winlog.event_data.LogonGuid
    Rename        LmPackageName, winlog.event_data.LmPackageName
    Rename        KeyLength, winlog.event_data.KeyLength
    Rename        IpPort, winlog.event_data.IpPort
    Rename        IpAddress, winlog.event_data.IpAddress
    Rename        ImpersonationLevel, winlog.event_data.ImpersonationLevel
    Rename        ElevatedToken, winlog.event_data.ElevatedToken
    Rename        AuthenticationPackageName, winlog.event_data.AuthenticationPackageName
    Rename        ActivityID, winlog.activity_id
    Rename        AlgorithmName, winlog.event_data.AlgorithmName
    Rename        ClientCreationTime, winlog.event_data.ClientCreationTime
    Rename        ClientProcessId, winlog.event_data.ClientProcessId
    Rename        KeyName, winlog.event_data.KeyName
    Rename        KeyType, winlog.event_data.KeyType
    Rename        Operation, winlog.event_data.Operation
    Rename        ProviderName, winlog.event_data.ProviderName
    Rename        ReturnCode, winlog.event_data.ReturnCode
    Rename        OriginalFileName, process.pe.original_file_name
    Rename        ParentCommandLine, process.parent.command_line
    Rename        ParentImage, process.parent.executable
    Rename        ParentProcessGuid, process.parent.entity_id
    Rename        ParentProcessId ,process.parent.pid
    Rename        Product, process.pe.product
    Rename        TerminalSessionId, winlog.event_data.TerminalSessionId
    Rename        RuleName, winlog.event_data.RuleName
    Rename        LogonId, winlog.event_data.LogonId
    Rename        IntegrityLevel, winlog.event_data.IntegrityLevel
    Rename        FileVersion, winlog.event_data.FileVersion
    Rename        CurrentDirectory, process.working_directory
    Rename        Company, winlog.event_data.Company
    Rename        CommandLine, process.command_line
    Rename        AccountExpires, winlog.event_data.AccountExpires
    Rename        AccountName, winlog.event_data.AccountName
    Rename        ActivityId, winlog.activity_id
    Rename        AddServiceID.AddServiceStatus, winlog.user_data.AddServiceStatus
    Rename        AdvancedOptions, winlog.user_data.AdvancedOptions
    # End renamed fields

    <Exec>
      ${winlog.event_id} = $EventID;
      ${event.code} = $EventID;

      delete("EventID");
      delete("Data_1");
      delete("Data_2");
      delete("Description");
      delete("Hostname");
      delete("User");
      delete("Image");
      delete("Data");
      delete("Hashes");
    </Exec>
</Extension>

# <---------- Inputs ---------->

<Input input_localJson_enventlog>
	Module    im_msvistalog
</Input>

<Input win_eventlog>
    Module        im_msvistalog
    <QueryXML>
        <QueryList>
            <Query Id='0'>
                <Select Path='Application'>*</Select>
                <Select Path='Security'>*[System/Level&lt;4]</Select>
                <Select Path='System'>*</Select>
                <Select Path='Microsoft-Windows-PowerShell/Operational'>*</Select>
                <Select Path='Windows PowerShell'>*</Select>
            </Query>
        </QueryList>
    </QueryXML>
    Exec          win_ecs->process(); to_json();
</Input>

<Output output_log01>
    Module  om_tcp
    host    172.16.1.12:1514
    Exec    to_json();
</Output>

<Output output_log02>
    Module  om_tcp
    host    172.16.1.12:1515
    Exec    to_json();
    BufferSize  100000;
</Output>

<Route output_logAggJson_windows>
    Path	input_localJson_enventlog => output_log01
</Route>

<Route output_logAgg_elastic>
    Path	win_eventlog => output_log02
</Route>